#!/bin/bash

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

command_list=(infected merge gender age daily monthly yearly countries districts regions)

COMMAND=""
FILE=""
GZ_FILE=""
BZ_FILE=""

# Function for date validation using regex
checkDate(){
    local status=1
    if [[ $1 =~ ((18|19|20)[0-9]{2}[\-.](0[13578]|1[02])[\-.](0[1-9]|[12][0-9]|3[01]))|(18|19|20)[0-9]{2}[\-.](0[469]|11)[\-.](0[1-9]|[12][0-9]|30)|(18|19|20)[0-9]{2}[\-.](02)[\-.](0[1-9]|1[0-9]|2[0-8])|(((18|19|20)(04|08|[2468][048]|[13579][26]))|2000)[\-.](02)[\-.]29 ]];
    then
        status=0
    fi
    return $status
}

# Parsing filter tag and commands
while [ $# -gt 0 ]; do
    case "$1" in
    -h)
        echo "Usage: corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]]"
        echo ""
        echo "COMMAND option:"
        echo "  infected - count of infected persons"
        echo "  merge - merge several files to one, keep original ordering, header in ouput is only one"
        echo "  gender - count of infected persons for specific gender"
        echo "  age - count of infected persons sorted by age intervals"
        echo "  daily - daily statistic of infected persons"
        echo "  monthly - monthly statistic of infected persons"
        echo "  yearly - yearly statistic of infected persons"
        echo "  countries - statistic of infected persons for each country"
        echo "  districts - statistic of infected persons for each district"
        echo "  regions - statistic of infected persons for each region"
        echo "FILTERS option:"
        echo "  -a DATETIME - script will work only with records with date AFTER defined DATETIME (format YYYY-MM-DD)"
        echo "  -b DATETIME - script will work only with records with date BEFORE defined DATETIME (format YYYY-MM-DD)"
        echo "  -g GENDER - script will work only with records with defined GENDER (can be M or Z)"
        echo "  -s [WIDTH] - for command gender, age, daily, monthly, yearly, countries, districts and regions output data in histogram"
        echo "               WIDTH is optional parameter to set width of histogram (length of the widest row)"
        exit 0
        ;; 
    infected | merge | gender | age | daily | monthly | yearly | countries | districts | regions)
        if [ "$COMMAND" = "" ]; then
            COMMAND="$1"
            echo $COMMAND
            shift
        else 
            shift
        fi
        ;;
    -a)
        if [ "$2" != "" ];
        then
            if checkDate "$2";
            then
                AFTER_DATE="$2"
                echo $AFTER_DATE
                shift
                shift
            else
                echo -e "Wrong date format or missing date parameter"
                exit 1
            fi
        else
            echo -e "-a: Missing date parameter"
            exit 1
        fi
        ;;
    -b)
        if [ "$2" != "" ];
        then
            if checkDate "$2";
            then
                BEFORE_DATE="$2"
                echo $BEFORE_DATE
                shift
                shift
            else
                echo -e "Wrong date format or missing date parameter"
                exit 1
            fi
        else
            echo -e "-a: Missing date parameter"
            exit 1
        fi
        ;;   
    -g)
        if [ "$2" = "" ];
        then
            echo -e "-g: Missing gender parameter"
            exit 1
        fi
        if [[ $2 =~ [MZ] ]];
        then
            GENDER="$2"
            echo $GENDER
            shift
            shift
        else
            echo -e "Wrong gender format"
            exit 1
        fi
        ;;
    -s)
        if [[ $2 =~ [0-9]{1} ]]; then
            echo $2
            WIDTH="$2"
            shift
            shift
            
        else
            shift
        fi
        ;;

    *.csv)
        FILE="$1"
        shift
        ;;

    *.csv.gz)
        GZ_FILE="$(gzcat $1)"
        echo "$GZ_FILE"
        shift
        ;;

    *.csv.bz2)
        BZ_FILE="$(bzcat $1)"
        echo "$BZ_FILE"
        shift
        ;;

    ?*)
        echo -e "Invalid command"
        exit 1
        ;;
    *)
        break
        ;;
    esac
done


#TODO bzip2 file reading
if [ "$FILE" = "" -a "$GZ_FILE" = "" -a "$BZ_FILE" = "" ];
    then
        cat
fi

if [ "$FILE" != "" ]; then
    TEST=$(cat "$FILE" | awk 'END{print NR}')
    echo $TEST
fi

if [ "$GZ_FILE" != "" ]; then
    TEST=$(echo "$GZ_FILE" | awk 'END{print NR}')
    echo "$TEST"
fi

if [ "$BZ_FILE" != "" ]; then
    
    TEST=$(echo "$BZ_FILE" | awk 'END{print NR}')
    echo "$TEST"
fi

