#!/bin/bash

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

COMMAND=""
HEADER="id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs\n"
FILE=$HEADER
GZ_FILE=""
BZ_FILE=""

GENDER_SET=0
DATE_AFTER_SET=0
DATE_BEFORE_SET=0
WIDTH_SET=0
FILE_SET=0

# Function for date validation using regex
checkDate(){
    local status=1
    if [[ $1 =~ ((18|19|20)[0-9]{2}[\-.](0[13578]|1[02])[\-.](0[1-9]|[12][0-9]|3[01]))|(18|19|20)[0-9]{2}[\-.](0[469]|11)[\-.](0[1-9]|[12][0-9]|30)|(18|19|20)[0-9]{2}[\-.](02)[\-.](0[1-9]|1[0-9]|2[0-8])|(((18|19|20)(04|08|[2468][048]|[13579][26]))|2000)[\-.](02)[\-.]29 ]];
    then
        status=0
    fi
    return $status
}

validateInput(){
    FILE=$(echo "$FILE" | grep "\S" $1)
    FILE=$(echo "$FILE" | awk -F ',' -v dateregex="((18|19|20)[0-9]{2}[\-.](0[13578]|1[02])[\-.](0[1-9]|[12][0-9]|3[01]))|(18|19|20)[0-9]{2}[\-.](0[469]|11)[\-.](0[1-9]|[12][0-9]|30)|(18|19|20)[0-9]{2}[\-.](02)[\-.](0[1-9]|1[0-9]|2[0-8])|(((18|19|20)(04|08|[2468][048]|[13579][26]))|2000)[\-.](02)[\-.]29" \
                            -v ageregex="^[ _0-9_ ]*$" \
                            'NR==1; NR > 1{ if ($2 ~ dateregex && $3 ~ ageregex)
                                {
                                    print $0;
                                }
                                else if (!($2 ~ dateregex)) print "Invalid date: " $0 | "cat 1>&2";
                                else if (!($3 ~ !ageregex)) print "Invalid age: " $0 | "cat 1>&2";
                                }')
}

# Filter functions
dateAfterFilter(){
    OUT=$(echo "$FILE" | awk -F ',' -v date="$AFTER_DATE" '{ if ($2 >= date) print $0}')
    echo "$OUT"
}

dateBeforeFilter(){
    OUT=$(echo "$FILE" | awk -F ',' -v date="$BEFORE_DATE" '{ if ($2 <= date) print $0}')
    echo "$OUT"
}

genderFilter(){
    OUT=$(echo "$FILE" | awk -F ',' -v g="$GENDER" '{ if ($4 == g) print $0}')
    echo "$OUT"
}

# Command function
infected(){
    OUT=$(echo "$FILE" | awk 'END{print NR-1}')
    echo "$OUT"
}

gender(){
    OUT=$(echo "$FILE" | awk -F ',' 'NR>1{A[$4]++;}END{for(i in A) print i ":", A[i]}')
    echo "$OUT"
}

merge(){
    # Files are already merged from parsing
    echo "$FILE"
}

age(){
    OUT=$(echo "$FILE" |\
        awk -F ',' \
        'NR>1{
            if ($3 >= 0 && $3 <=5)
                B[0]++
            else if ($3 >= 6 && $3 <=15)
                B[1]++
            else if ($3 >= 16 && $3 <=25)
                B[2]++
            else if ($3 >= 26 && $3 <=35)
                B[3]++
            else if ($3 >= 36 && $3 <=45)
                B[4]++
            else if ($3>= 46 && $3 <=55)
                B[5]++
            else if ($3 >= 56 && $3 <=65)
                B[6]++
            else if ($3>= 66 && $3 <=75)
                B[7]++
            else if ($3 >= 76 && $3 <=85)
                B[8]++
            else if ($3 >= 86 && $3 <=95)
                B[9]++
            else if ($3 >= 96 && $3 <=105)
                B[10]++
            else if ($3 >= 105)
                B[11]++
            else
                B[12]++
        } END {
            print "0-5   :", B[0];
            print "6-15  :", B[1];
            print "16-25 :", B[2];
            print "26-35 :", B[3];
            print "36-45 :", B[4];
            print "46-55 :", B[5];
            print "56-65 :", B[6];
            print "66-75 :", B[7];
            print "76-85 :", B[8];
            print "86-95 :", B[9];
            print "96-105:", B[10];
            print ">105  :", B[11];
            print "None  :", B[12];
        }')
    echo "$OUT"
}

daily(){
    OUT=$(echo "$FILE" | awk -F ',' 'NR>1{A[$2]++;}END{for(i in A) print i ":", A[i]}'| sort -nk1)
    echo "$OUT"
}

monthly(){
    OUT=$(echo "$FILE" | awk -F ',' 'NR>1{print $2}'|awk -F '-' '{ print $1 "-" $2}'| awk '{A[$1]++}END{for(i in A) print i ":", A[i]}'| sort -nk1)
    echo "$OUT"
}

yearly(){
    OUT=$(echo "$FILE" | awk -F ',' 'NR>1{print $2}'|awk -F '-' '{A[$1]++;}END{for(i in A){} print i ":", A[i]}'| sort -nk1)
    echo "$OUT"
}

countries(){
    OUT=$(echo "$FILE" | awk -F ',' 'NR>1{A[$8]++;}END{for(i in A){if (i=="") print "None:", A[i]; else print i ":", A[i]}}' | sort -k1)
    echo "$OUT"   
}

districts(){
    OUT=$(echo "$FILE" | awk -F ',' 'NR>1{A[$6]++;}END{for(i in A){if (i=="") print "None:", A[i]; else print i ":", A[i]}} '| sort -k1)
    echo "$OUT"  
}

regions(){
    OUT=$(echo "$FILE" | awk -F ',' 'NR>1{A[$5]++;}END{for(i in A){if (i=="") print "None:", A[i]; else print i ":", A[i]}} ' | sort -k1)
    echo "$OUT"  
}

# Parsing filter tag and commands
while [ $# -gt 0 ]; do
    case "$1" in
    -h)
        echo "Usage: corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]]"
        echo ""
        echo "COMMAND option:"
        echo "  infected - count of infected persons"
        echo "  merge - merge several files to one, keep original ordering, header in output is only one"
        echo "  gender - count of infected persons for specific gender"
        echo "  age - count of infected persons sorted by age intervals"
        echo "  daily - daily statistic of infected persons"
        echo "  monthly - monthly statistic of infected persons"
        echo "  yearly - yearly statistic of infected persons"
        echo "  countries - statistic of infected persons for each country"
        echo "  districts - statistic of infected persons for each district"
        echo "  regions - statistic of infected persons for each region"
        echo "FILTERS option:"
        echo "  -a DATETIME - script will work only with records with date AFTER defined DATETIME (format YYYY-MM-DD)"
        echo "  -b DATETIME - script will work only with records with date BEFORE defined DATETIME (format YYYY-MM-DD)"
        echo "  -g GENDER - script will work only with records with defined GENDER (can be M or Z)"
        echo "  -s [WIDTH] - for command gender, age, daily, monthly, yearly, countries, districts and regions output data in histogram"
        echo "               WIDTH is optional parameter to set width of histogram (length of the widest row)"
        exit 0
        ;; 
    infected | merge | gender | age | daily | monthly | yearly | countries | districts | regions)
        if [ "$COMMAND" = "" ]; then
            COMMAND="$1"
            shift
        else 
            shift
        fi
        ;;
    -a)
        if [ "$2" != "" ];
        then
            if checkDate "$2";
            then
                DATE_AFTER_SET=1
                AFTER_DATE="$2"
                shift
                shift
            else
                echo -e "Wrong date format or missing date parameter"
                exit 1
            fi
        else
            echo -e "-a: Missing date parameter"
            exit 1
        fi
        ;;
    -b)
        if [ "$2" != "" ];
        then
            if checkDate "$2";
            then
                DATE_BEFORE_SET=1
                BEFORE_DATE="$2"
                shift
                shift
            else
                echo -e "Wrong date format or missing date parameter"
                exit 1
            fi
        else
            echo -e "-a: Missing date parameter"
            exit 1
        fi
        ;;   
    -g)
        if [ "$2" != "" ];
        then
            if [ "$2" = "M" -o "$2" = "Z" ];
            then
                GENDER_SET=1
                GENDER="$2"
                shift
                shift
            else
                echo -e "Wrong gender format or missing gender parameter"
                exit 1
            fi
        else
            echo -e "-g: Missing gender parameter"
            exit 1
        fi
        ;;
    -s)
        if [[ $2 =~ [0-9]+ ]]; then
            WIDTH_SET=1
            WIDTH="$2"
            shift
            shift
            
        else
            shift
        fi
        ;;

    *.csv)
        FILE=$FILE"$(cat $1| sed 1d)"
        FILE_SET=1
        shift
        ;;

    *.csv.gz)
        FILE=$FILE"$(gzcat $1|sed 1d)"
        FILE_SET=1
        shift
        ;;

    *.csv.bz2)
        FILE=$FILE"$(bzcat $1|sed 1d)"
        FILE_SET=1
        shift
        ;;

    ?*)
        echo -e "Invalid command"
        exit 1
        ;;
    *)
        break
        ;;
    esac
done


if [ $FILE_SET -eq 0 ];
    then
    FILE=$FILE"$(< /dev/stdin)"
fi


validateInput

if [ $DATE_AFTER_SET -eq 1 ];
then
    FILE=$(dateAfterFilter)
fi

if [ $DATE_BEFORE_SET -eq 1 ];
then
    FILE=$(dateBeforeFilter)
fi

if [ $GENDER_SET -eq 1 ];
then
    FILE=$(genderFilter)
fi

if [ "$COMMAND" = "" ];
then
    echo "$FILE"
fi

case $COMMAND in
    infected)
        infected
        exit 0
        ;;
    merge)
        merge
        exit 0
        ;;
    gender)
        gender
        exit 0
        ;;
    age)
        age
        exit 0
        ;;
    daily)
        daily
        exit 0
        ;;
    monthly)
        monthly
        exit 0
        ;;
    yearly)
        yearly
        exit 0
        ;;
    countries)
        countries
        exit 0
        ;;
    districts)
        districts
        exit 0
        ;;
    regions)
        regions
        exit 0
        ;;
esac
